
from typing import List
import heapq

class Solution:
    def MinimumEffort(self, rows: int, columns: int, heights: List[List[int]]) -> int:
        # Initialize priority queue
        pq = [(0, 0, 0)]  # (effort, row, column)
        
        # Initialize efforts array
        efforts = [[float('inf')] * columns for _ in range(rows)]
        efforts[0][0] = 0
        
        # Define directions (up, down, left, right)
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        while pq:
            effort, r, c = heapq.heappop(pq)
            if (r, c) == (rows - 1, columns - 1):
                return effort
            
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < rows and 0 <= nc < columns:
                    new_effort = max(effort, abs(heights[r][c] - heights[nr][nc]))
                    if new_effort < efforts[nr][nc]:
                        efforts[nr][nc] = new_effort
                        heapq.heappush(pq, (new_effort, nr, nc))

