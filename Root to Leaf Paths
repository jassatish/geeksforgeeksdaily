
from typing import Optional
from collections import deque

from typing import List

"""

definition of binary tree node.
class Node:
    def _init_(self,val):
        self.data = val
        self.left = None
        self.right = None
"""

class Solution:
    def Paths(self, root : Optional['Node']) -> List[List[int]]:
        res = []
        def solve(root,kek):
            temp = kek
            if root is None:
                return
            temp.append(root.data)
            if not root.left and not root.right:
                res.append(temp[:])
                temp.pop()
                return
            solve(root.left,temp)
            solve(root.right,temp)
            temp.pop()
        solve(root,[])
        return res

