class Solution:
    def __init__(self):
        self.lst=[]

    # Function to find nodes at k distance below the given root
    def findKDistanceDownNode(self,root,d):
        if d<0 or not root:  # if distance is negative or root is None, return
            return
        if d==0:  # if distance is 0, append root data to the list
            self.lst.append(root.data)
            return
        # recursively find nodes at k distance below left and right child of root
        self.findKDistanceDownNode(root.left,d-1)
        self.findKDistanceDownNode(root.right,d-1)

    # Function to find the target node and its k distance nodes
    def findKDistanceNode(self,root,target,k):
        if not root:  # if tree is empty, return -1
            return -1
        if root.data==target:  # if the current root is the target node
            # find nodes at k distance below the current root
            self.findKDistanceDownNode(root,k)
            return 0

        dl=self.findKDistanceNode(root.left,target,k)  # recursively find target node in left subtree
        
        if dl!=-1:  # if target node found in left subtree
            if dl+1==k:  # if the current root is at k distance from the target
                self.lst.append(root.data)  # append root data to the list
            else:
                # find nodes at k distance below the right child of root
                self.findKDistanceDownNode(root.right,k-dl-2)
            return 1+dl  # return the distance of target node from the current root

        dr=self.findKDistanceNode(root.right,target,k)  # recursively find target node in right subtree

        if dr!=-1:  # if target node found in right subtree
            if dr+1==k:  # if the current root is at k distance from the target
                self.lst.append(root.data)  # append root data to the list
            else:
                # find nodes at k distance below the left child of root
                self.findKDistanceDownNode(root.left,k-dr-2)
            return 1+dr  # return the distance of target node from the current root

        return -1  # return -1 if target node not found

    # Function to find nodes at k distance from the target node
    def KDistanceNodes(self,root,target,k):
        self.lst.clear()  # clear the list to store the result

        self.findKDistanceNode(root,target,k)  # find the target node and its k distance nodes

        self.lst.sort()  # sort the list in ascending order

        return self.lst  # return the list of nodes at k distance from the target node
