
'''

def height(node):
    if node is None:
        return 0
    return node.height

def update_height(node):
    node.height = 1 + max(height(node.left), height(node.right))

def balance_factor(node):
    if node is None:
        return 0
    return height(node.left) - height(node.right)

def rotate_left(y):
    x = y.right
    T2 = x.left

    x.left = y
    y.right = T2

    update_height(y)
    update_height(x)

    return x

def rotate_right(x):
    y = x.left
    T2 = y.right

    y.right = x
    x.left = T2

    update_height(x)
    update_height(y)

    return y

def rebalance(node):
    update_height(node)

    balance = balance_factor(node)

    if balance > 1:
        if balance_factor(node.left) >= 0:
            return rotate_right(node)
        else:
            node.left = rotate_left(node.left)
            return rotate_right(node)

    if balance < -1:
        if balance_factor(node.right) <= 0:
            return rotate_left(node)
        else:
            node.right = rotate_right(node.right)
            return rotate_left(node)

    return node

def find_min(node):
    current = node
    while current.left is not None:
        current = current.left
    return current

def deleteNode(root, key):
    if root is None:
        return root

    if key < root.data:
        root.left = deleteNode(root.left, key)
    elif key > root.data:
        root.right = deleteNode(root.right, key)
    else:
        if root.left is None:
            return root.right
        elif root.right is None:
            return root.left

        temp = find_min(root.right)
        root.data = temp.data
        root.right = deleteNode(root.right, temp.data)

    return rebalance(root)
